// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine whether or not the instruction is an A instrution or a C instruction.
    // Then determine the input for the A register.
    Not(in=instruction[15], out=aInstruction);
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=aRegIn);

    // If the instruction is a C instruction and the load D register bit is set, then
    // update the D register.
    And(a=instruction[15], b=instruction[4], out=dRegLoad);
    DRegister(in=aluOut, load=dRegLoad, out=aluX);

    // If the instruction is an A instruction or the load A register bit is set, then
    // update the A register. Set the RAM address output to the output of the A register.
    Or(a=aInstruction, b=instruction[5], out=aRegLoad);
    ARegister(in=aRegIn, load=aRegLoad, out=aRegOut, out[0..14]=addressM);

    // Select between the A register output and the RAM data input based on the
    // "a" control bit.
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aluY);

    // Run the ALU.
    ALU(x=aluX, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    // If the instruction is a sit instruction and the update memory bit is set, then
    // set the write memory output bit.
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Select whether or not the current instruction is triggering a jump based on the
    // zero and negative outputs of the ALU and the instruction jump bits.
    And(a=notzr, b=notng, out=gt);
    Or(a=zr, b=notng, out=gte);
    Or(a=zr, b=ng, out=lte);
    Mux8Way16(a[0]=false, b[0]=gt, c[0]=zr, d[0]=gte, e[0]=ng, f[0]=notzr, g[0]=lte, h[0]=true, sel=instruction[0..2], out[0]=jump);

    // If the current instruction is triggering a jump, update the PC counter to the
    // ouput of the A register.
    And(a=jump, b=instruction[15], out=pcLoad);
    PC(in=aRegOut, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}